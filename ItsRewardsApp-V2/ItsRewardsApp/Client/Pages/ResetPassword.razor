<h3>ResetPassword</h3>
@page "/resetpassword"
@using ItsRewardsApp.Shared.Models;
@using ItsRewardsApp.Shared.ViewModels
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<header class="header">
    <a href="/dashboard">
        @*<img src="images/itsRewardsLogo.jpg" class="cls-header-img" alt="" />*@
        <img src=@menuIconImage class="cls-header-img" alt="" />
    </a>
    <h5 style="color:#1f81b2;">@headerName</h5>
</header>
<div class="container register-section">
    <main class="register-container">
        <div class="row">
            <div class="main-title text-center">
                <h6 class="title">Reset Password</h6>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-10">
                <EditForm Model="@resetModel" OnValidSubmit="ResetUserPassword">
                    <DataAnnotationsValidator />

                    <div class="mb-3 row">
                        <label for="Password" class="col-sm-2 col-form-label"><span class="required">*&nbsp;</span>Password:</label>
                        <div class="col-sm-10">
                            <InputText type="text" autocomplete="off" name="Password" id="Password" placeholder="Password" class="form-control" @bind-Value="resetModel.Password"></InputText>
                            <ValidationMessage For="@(() => resetModel.Password)" />
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label for="ConfirmPassword" class="col-sm-2 col-form-label"><span class="required">*&nbsp;</span>Confirm Password:</label>
                        <div class="col-sm-10">
                            <InputText type="password" autocomplete="off" name="ConfirmPassword" id="ConfirmPassword" placeholder="Confirm Password" class="form-control" @bind-Value="resetModel.ConfirmPassword"></InputText>
                            <ValidationMessage For="@(() => resetModel.ConfirmPassword)" />
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <label for="Pin" class="col-sm-2 col-form-label"><span class="required">*&nbsp;</span>Pin:</label>
                        <div class="col-sm-10">
                            <InputText type="text" autocomplete="off" name="Pin" id="Pin" placeholder="Pin" class="form-control" @bind-Value="resetModel.Pin"></InputText>
                            <ValidationMessage For="@(() => resetModel.Pin)" />
                        </div>
                    </div>
                    <div class="mb-3 row">
                        <div class="col-md-12">
                            <div class="d-flex gap-2 justify-content-center">
                                <button class="btn cls-submit-btn" type="submit">Reset</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </main>

</div>
<footer class="footer">
    <p class="cls-footer-common">© 2022 - SUCCESS SYSTEMS, INC. &nbsp;-&nbsp; <a href="/legal/privacy.html" target="_blank">PRIVACY</a> | <a href="/legal/terms.html" target="_blank">TERMS</a></p>
</footer>
@code {

    protected ResetPasswordViewModel resetModel = new();
    private string pin = "";
    public string appProfileName = "";
    public string menuIconImage = "";
    public string headerName = "";
    protected override async Task OnParametersSetAsync()
    {

    }
    protected override Task OnInitializedAsync()
    {
        ForgotPin();
        resetModel = new ResetPasswordViewModel();
        return base.OnInitializedAsync();
    }
    protected async Task ForgotPin()
    {
        pin = await sessionStorage.GetItemAsync<string>("ForgotPin");
        appProfileName = await sessionStorage.GetItemAsync<string>("appProfileName");
        if (appProfileName.ToLower() == "e-commerce")
        {
            EcommerceApplicationProfile ea = new EcommerceApplicationProfile();
            menuIconImage = ea.MenuIcon;
            headerName = "E-Commerce";
        }
        if (appProfileName.ToLower() == "its-reward")
        {
            ItRewardApplicationProfile ia = new ItRewardApplicationProfile();
            menuIconImage = ia.MenuIcon;
            headerName = ia.Title;
        }
        StateHasChanged();
    }
    protected async Task ResetUserPassword()
    {
        var cellPhone = await sessionStorage.GetItemAsync<string>("CellPhone");
        if (pin != resetModel.Pin)
        {
            await JsRuntime.InvokeAsync<string>("alert", "Pin is Incorrect. Please try again");
            return;
        }
        if (cellPhone != "" && cellPhone != null)
        {
            resetModel.CellPhone = cellPhone;
            var result = await Http.PutAsJsonAsync("api/Login", resetModel);
            await JsRuntime.InvokeAsync<string>("alert", "Password updated successfully.");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}


